{"version":3,"file":"bot.js","sourceRoot":"","sources":["../src/bot.ts"],"names":[],"mappings":";;AAAA,4CAAsD;AACtD,+CAA0D;AAC1D,2CAA4D;AAC5D,qCAAkC;AAClC,iDAAqD;AAErD,qGAAqG;AACrG,MAAM,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,gBAAgB,CAAsB,CAAC;AAEjE,MAAM,MAAM,GAAG,IAAI,mBAAM,CAAC;IACzB,OAAO,EAAE,CAAC,uBAAiB,CAAC,gBAAgB,EAAE,uBAAiB,CAAC,aAAa,EAAE,uBAAiB,CAAC,MAAM,CAAC;CACxG,CAAC,CAAC;AAEH,MAAM,EAAE,MAAM,EAAE,GAAG,sBAAS,CAAC;AAE7B,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;AAE5D,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,cAAc,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;IAClD,IAAI,CAAC,OAAO,CAAC,KAAK;QAAE,OAAO;IAC3B,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK;QAAE,MAAM,MAAM,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC;IAElE,IAAI,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,SAAS,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,WAAW,EAAE,KAAK,EAAE,EAAE,EAAE;QACvG,MAAM,IAAA,eAAM,EAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC5B,MAAM,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;KACjC;AACF,CAAC,CAAC,CAAC;AAEH;;GAEG;AACH,MAAM,UAAU,GAAG,IAAI,GAAG,EAAU,CAAC;AAErC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,EAAE,WAAwB,EAAE,EAAE;IACvE,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO;QAAE,OAAO;IAE7D,MAAM,OAAO,GAAG,kCAAmB,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAEjE,IAAI;QACH,IAAI,OAAO,EAAE;YACZ,MAAM,OAAO,CAAC,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE,IAAA,0BAAkB,EAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;SACxF;aAAM;YACN,MAAM,WAAW,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;SAC3C;KACD;IAAC,OAAO,KAAK,EAAE;QACf,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACpB;AACF,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AAEtC,KAAK,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC","sourcesContent":["import { getVoiceConnection } from '@discordjs/voice';\nimport { GatewayIntentBits } from 'discord-api-types/v10';\nimport { Interaction, Constants, Client } from 'discord.js';\nimport { deploy } from './deploy';\nimport { interactionHandlers } from './interactions';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\nconst { token } = require('../config.json') as { token: string };\n\nconst client = new Client({\n\tintents: [GatewayIntentBits.GuildVoiceStates, GatewayIntentBits.GuildMessages, GatewayIntentBits.Guilds],\n});\n\nconst { Events } = Constants;\n\nclient.on(Events.CLIENT_READY, () => console.log('Ready!'));\n\nclient.on(Events.MESSAGE_CREATE, async (message) => {\n\tif (!message.guild) return;\n\tif (!client.application?.owner) await client.application?.fetch();\n\n\tif (message.content.toLowerCase() === '!deploy' && message.author.id === client.application?.owner?.id) {\n\t\tawait deploy(message.guild);\n\t\tawait message.reply('Deployed!');\n\t}\n});\n\n/**\n * The IDs of the users that can be recorded by the bot.\n */\nconst recordable = new Set<string>();\n\nclient.on(Events.INTERACTION_CREATE, async (interaction: Interaction) => {\n\tif (!interaction.isCommand() || !interaction.guildId) return;\n\n\tconst handler = interactionHandlers.get(interaction.commandName);\n\n\ttry {\n\t\tif (handler) {\n\t\t\tawait handler(interaction, recordable, client, getVoiceConnection(interaction.guildId));\n\t\t} else {\n\t\t\tawait interaction.reply('Unknown command');\n\t\t}\n\t} catch (error) {\n\t\tconsole.warn(error);\n\t}\n});\n\nclient.on(Events.ERROR, console.warn);\n\nvoid client.login(token);\n"]}