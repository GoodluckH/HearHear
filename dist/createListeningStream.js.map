{"version":3,"file":"createListeningStream.js","sourceRoot":"","sources":["../src/createListeningStream.ts"],"names":[],"mappings":";;;;AAAA,qCAA4C;AAC5C,6CAAuC;AACvC,4CAAkE;AAElE,2DAAqC;AAErC,SAAS,cAAc,CAAC,MAAc,EAAE,IAAW;IAClD,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;AACjE,CAAC;AAED,SAAgB,qBAAqB,CAAC,QAAuB,EAAE,MAAc,EAAE,IAAW;IACzF,MAAM,UAAU,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE;QAC7C,GAAG,EAAE;YACJ,QAAQ,EAAE,uBAAe,CAAC,YAAY;YACtC,QAAQ,EAAE,IAAI;SACd;KACD,CAAC,CAAC;IAEH,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC;QACpD,QAAQ,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;YACjC,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,KAAK;SACjB,CAAC;QACF,eAAe,EAAE;YAChB,UAAU,EAAE,EAAE;SACd;KACD,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,gBAAgB,IAAI,CAAC,GAAG,EAAE,IAAI,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC;IAElF,MAAM,GAAG,GAAG,IAAA,2BAAiB,EAAC,QAAQ,CAAC,CAAC;IAExC,OAAO,CAAC,GAAG,CAAC,wBAAwB,QAAQ,EAAE,CAAC,CAAC;IAEhD,IAAA,sBAAQ,EAAC,UAAU,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE;QAC5C,IAAI,GAAG,EAAE;YACR,OAAO,CAAC,IAAI,CAAC,0BAA0B,QAAQ,MAAM,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;SACpE;aAAM;YACN,OAAO,CAAC,GAAG,CAAC,cAAc,QAAQ,EAAE,CAAC,CAAC;SACtC;IACF,CAAC,CAAC,CAAC;AACJ,CAAC;AA/BD,sDA+BC","sourcesContent":["import { createWriteStream } from 'node:fs';\nimport { pipeline } from 'node:stream';\nimport { EndBehaviorType, VoiceReceiver } from '@discordjs/voice';\nimport type { User } from 'discord.js';\nimport * as prism from 'prism-media';\n\nfunction getDisplayName(userId: string, user?: User) {\n\treturn user ? `${user.username}_${user.discriminator}` : userId;\n}\n\nexport function createListeningStream(receiver: VoiceReceiver, userId: string, user?: User) {\n\tconst opusStream = receiver.subscribe(userId, {\n\t\tend: {\n\t\t\tbehavior: EndBehaviorType.AfterSilence,\n\t\t\tduration: 1000,\n\t\t},\n\t});\n\n\tconst oggStream = new prism.opus.OggLogicalBitstream({\n\t\topusHead: new prism.opus.OpusHead({\n\t\t\tchannelCount: 2,\n\t\t\tsampleRate: 48000,\n\t\t}),\n\t\tpageSizeControl: {\n\t\t\tmaxPackets: 10,\n\t\t},\n\t});\n\n\tconst filename = `./recordings/${Date.now()}-${getDisplayName(userId, user)}.ogg`;\n\n\tconst out = createWriteStream(filename);\n\n\tconsole.log(`üëÇ Started recording ${filename}`);\n\n\tpipeline(opusStream, oggStream, out, (err) => {\n\t\tif (err) {\n\t\t\tconsole.warn(`‚ùå Error recording file ${filename} - ${err.message}`);\n\t\t} else {\n\t\t\tconsole.log(`‚úÖ Recorded ${filename}`);\n\t\t}\n\t});\n}\n"]}